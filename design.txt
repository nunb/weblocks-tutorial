Design:

We shall build a voting system. Start minimal. A title (phrased as a question) and upvotes + downvotes. How do we ensure people vote only once?
We will attempt to ensure fair voting by using a long-running session per user (which in turn will set  a cookie). Since this is a simple project we'll just default to cl-prevalence, which is extremely simple to get started with.

Structures/classes:

votable with upvotes + downvotes
This goes into models.lisp -- we like defclass* so add it to the asd file, and re-evaluate (ql:quickload "tut") at the repl.

question inherits from votable with a title

Pages:

The landing page should show all outstanding questions before the weblocks community, their upvotes + downvotes. There should be a button to add a question. Perhaps later we can have threaded comments, tickets etc.


So our files:

DONE

firstpage.lisp

DONE

Remember, when you restart weblocks/lisp for any reason (I just did it to move my development into a tmux session) you must restart weblocks.

Also, in this case we've changed what init-session does, so to see changes we'd have to reset-sessions.

So remember and use these two commands:
 (weblocks:reset-sessions)
 (weblocks:start-weblocks)


Well, now we actually have data to render, or rather, we'd render it if we had it.

Stop and start lisp using our standard start-tut.lisp, and at the repl (at the command prompt) go to the tut package:

(in-package 'tut)
(start-tut)

Ensure weblocks is running! That will open the tut store automatically.

Alternate instructions:
(weblocks:start-weblocks)
and start tut using a browser.

Go to the browser to ensure it's running. Then at the repl:

? (make-instance 'question :title "This is the first question")
#<QUESTION #x30004373FEBD>
? (o-save *)
#<QUESTION #x30004373FEBD>
? 

* indicates "last thing printed at the repl"

Now refresh your browser. Voila!

Add a few more Qs the same way. (Since we're using rlwrap remember to use the up arrow key to save typing!).

Also note that at this point the data/transaction.xml file is created since we've saved data to the default persistence store.

Okay, now we need an interface to actually add questions thru the browser. 

That means forms+views, all that good stuff. We can also do this an alternate way, by hand-coding the forms..

